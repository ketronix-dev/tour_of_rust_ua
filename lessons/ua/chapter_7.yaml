- title: Розділ 7 - Об'єктно Орієнтоване Програмування
  content_markdown: >
    Вираження ідей за допомогою функцій є перевіреним способом представлення поведінки та
    даних (C

    робить це вже десятки років!). Історично склалося так, що інформатика знайшла
    інші

    корисні виразні агрегації та абстракції для даних. Ви можете бути
    знайомі з об'єктно-орієнтованим програмуванням (ООП) як одним

    з таких способів. У цій главі ми розглянемо мову програмування Rust за межами
    функцій.
- title: Що таке ООП?
  content_markdown: >
    Об'єктно-орієнтоване програмування має наступні принципи:

    * Інкапсуляція - об'єднання даних і функцій у концептуальну одиницю,
    єдиний тип, який називається *об'єкт*.

    * Абстрагування - приховування даних і членів функцій для того, щоб приховати деталі реалізації об'єкта.

    * Поліморфізм - здатність взаємодіяти з об'єктами різних типів через один інтерфейс.

    * Спадкування - можливість успадковувати дані та поведінку від інших об'єктів.
- title: Rust не є ООП-орієнтованим
  content_markdown: >
    У Rust відсутнє успадкування даних.


    * Структури не можуть успадковувати поля від батьківської структури.

    * Структури не можуть успадковувати функції від батьківської структури.


    Тим не менш, у Rust є багато інших реалізацій, так що ви
    ви можете не звертати уваги на цей недолік.
- title: Інкапсуляція в методах
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20SeaCreature%20%7B%0A%20%20%20%20noise%3A%20String%2C%0A%7D%0A%0Aimpl%20SeaCreature%20%7B%0A%20%20%20%20fn%20get_sound(%26self)%20-%3E%20%26str%20%7B%0A%20%20%20%20%20%20%20%20%26self.noise%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20creature%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20noise%3A%20String%3A%3Afrom(%22blub%22)%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20creature.get_sound())%3B%0A%7D%0A
  content_markdown: >
    Rust підтримує концепцію *об'єкта*, який є структурою, пов'язаною з
    деякими функціями (також відомими як *методи*).


    Першим параметром будь-якого методу має бути посилання на екземпляр
    пов'язаний з викликом методу (наприклад, `instanceOfObj.foo()`). Rust використовує:

    * `&self` - незмінне посилання на екземпляр.

    * `&mut self` - змінне посилання на екземпляр.


    Методи визначаються в блоці реалізації з ключовим словом `impl`:

    ```rust

    impl MyStruct {
        ...
        fn foo(&self) { ...
            ...
        }
    }

    ```
- title: Абстракція з вибірковою експозицією
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20SeaCreature%20%7B%0A%20%20%20%20pub%20name%3A%20String%2C%0A%20%20%20%20noise%3A%20String%2C%0A%7D%0A%0Aimpl%20SeaCreature%20%7B%0A%20%20%20%20pub%20fn%20get_sound(%26self)%20-%3E%20%26str%20%7B%0A%20%20%20%20%20%20%20%20%26self.noise%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20creature%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Ferris%22)%2C%0A%20%20%20%20%20%20%20%20noise%3A%20String%3A%3Afrom(%22blub%22)%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20creature.get_sound())%3B%0A%7D%0A
  content_markdown: >
    Rust може приховувати внутрішню роботу об'єктів.


    За замовчуванням поля і методи доступні лише для модуля, до якого вони належать.


    Ключове слово `pub` відкриває поля і методи структур за межами модуля.
- title: Поліморфізм у Traits
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20SeaCreature%20%7B%0A%20%20%20%20pub%20name%3A%20String%2C%0A%20%20%20%20noise%3A%20String%2C%0A%7D%0A%0Aimpl%20SeaCreature%20%7B%0A%20%20%20%20pub%20fn%20get_sound(%26self)%20-%3E%20%26str%20%7B%0A%20%20%20%20%20%20%20%20%26self.noise%0A%20%20%20%20%7D%0A%7D%0A%0Atrait%20NoiseMaker%20%7B%0A%20%20%20%20fn%20make_noise(%26self)%3B%0A%7D%0A%0Aimpl%20NoiseMaker%20for%20SeaCreature%20%7B%0A%20%20%20%20fn%20make_noise(%26self)%20%7B%0A%20%20%20%20%20%20%20%20println!(%22%7B%7D%22%2C%20%26self.get_sound())%3B%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20creature%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Ferris%22)%2C%0A%20%20%20%20%20%20%20%20noise%3A%20String%3A%3Afrom(%22blub%22)%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20creature.make_noise()%3B%0A%7D%0A
  content_markdown: >
    Rust підтримує поліморфізм за допомогою *ознак (Traits)*. Властивості дозволяють нам пов'язати набір
    методів зі структурним типом.


    Спочатку ми визначаємо сигнатури методів, що входять до складу ознаки (Trait):


    ```

    trait MyTrait {
        fn foo(&self);
        ...
    }

    ```


    Коли структура реалізує трейт, вона встановлює контракт, який дозволяє нам
    опосередковано взаємодіяти зі структурою

    через тип риси (наприклад, `&dyn MyTrait`) без необхідності знати реальний
    тип.


    Реалізовані методи трейтів структури визначаються в межах реалізації
    блоку реалізації:


    ```rust

    impl MyTrait for MyStruct {
        fn foo(&self) {
            ...
        }
        ...
    }

    ```
- title: Імплементація методів у Traits
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20SeaCreature%20%7B%0A%20%20%20%20pub%20name%3A%20String%2C%0A%20%20%20%20noise%3A%20String%2C%0A%7D%0A%0Aimpl%20SeaCreature%20%7B%0A%20%20%20%20pub%20fn%20get_sound(%26self)%20-%3E%20%26str%20%7B%0A%20%20%20%20%20%20%20%20%26self.noise%0A%20%20%20%20%7D%0A%7D%0A%0Atrait%20NoiseMaker%20%7B%0A%20%20%20%20fn%20make_noise(%26self)%3B%0A%20%20%20%20%0A%20%20%20%20fn%20make_alot_of_noise(%26self)%7B%0A%20%20%20%20%20%20%20%20self.make_noise()%3B%0A%20%20%20%20%20%20%20%20self.make_noise()%3B%0A%20%20%20%20%20%20%20%20self.make_noise()%3B%0A%20%20%20%20%7D%0A%7D%0A%0Aimpl%20NoiseMaker%20for%20SeaCreature%20%7B%0A%20%20%20%20fn%20make_noise(%26self)%20%7B%0A%20%20%20%20%20%20%20%20println!(%22%7B%7D%22%2C%20%26self.get_sound())%3B%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20creature%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Ferris%22)%2C%0A%20%20%20%20%20%20%20%20noise%3A%20String%3A%3Afrom(%22blub%22)%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20creature.make_alot_of_noise()%3B%0A%7D%0A
  content_markdown: >
    Трейт може мати імплементовані методи.


    Функції не мають прямого доступу до внутрішніх полів структури, але вони
    можуть бути корисним для спільного використання поведінки між багатьма реалізаторами трейтів.
- title: Наслідування у Traits
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20SeaCreature%20%7B%0A%20%20%20%20pub%20name%3A%20String%2C%0A%20%20%20%20noise%3A%20String%2C%0A%7D%0A%0Aimpl%20SeaCreature%20%7B%0A%20%20%20%20pub%20fn%20get_sound(%26self)%20-%3E%20%26str%20%7B%0A%20%20%20%20%20%20%20%20%26self.noise%0A%20%20%20%20%7D%0A%7D%0A%0Atrait%20NoiseMaker%20%7B%0A%20%20%20%20fn%20make_noise(%26self)%3B%0A%7D%0A%0Atrait%20LoudNoiseMaker%3A%20NoiseMaker%20%7B%0A%20%20%20%20fn%20make_alot_of_noise(%26self)%20%7B%0A%20%20%20%20%20%20%20%20self.make_noise()%3B%0A%20%20%20%20%20%20%20%20self.make_noise()%3B%0A%20%20%20%20%20%20%20%20self.make_noise()%3B%0A%20%20%20%20%7D%0A%7D%0A%0Aimpl%20NoiseMaker%20for%20SeaCreature%20%7B%0A%20%20%20%20fn%20make_noise(%26self)%20%7B%0A%20%20%20%20%20%20%20%20println!(%22%7B%7D%22%2C%20%26self.get_sound())%3B%0A%20%20%20%20%7D%0A%7D%0A%0Aimpl%20LoudNoiseMaker%20for%20SeaCreature%20%7B%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20creature%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Ferris%22)%2C%0A%20%20%20%20%20%20%20%20noise%3A%20String%3A%3Afrom(%22blub%22)%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20creature.make_alot_of_noise()%3B%0A%7D%0A
  content_markdown: |
    Трейти можуть наслідувати методи з інших трейтів.
- title: Динамічна та статична диспетчеризації.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20SeaCreature%20%7B%0A%20%20%20%20pub%20name%3A%20String%2C%0A%20%20%20%20noise%3A%20String%2C%0A%7D%0A%0Aimpl%20SeaCreature%20%7B%0A%20%20%20%20pub%20fn%20get_sound(%26self)%20-%3E%20%26str%20%7B%0A%20%20%20%20%20%20%20%20%26self.noise%0A%20%20%20%20%7D%0A%7D%0A%0Atrait%20NoiseMaker%20%7B%0A%20%20%20%20fn%20make_noise(%26self)%3B%0A%7D%0A%0Aimpl%20NoiseMaker%20for%20SeaCreature%20%7B%0A%20%20%20%20fn%20make_noise(%26self)%20%7B%0A%20%20%20%20%20%20%20%20println!(%22%7B%7D%22%2C%20%26self.get_sound())%3B%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20static_make_noise(creature%3A%20%26SeaCreature)%20%7B%0A%20%20%20%20%2F%2F%20we%20know%20the%20real%20type%0A%20%20%20%20creature.make_noise()%3B%0A%7D%0A%0Afn%20dynamic_make_noise(noise_maker%3A%20%26dyn%20NoiseMaker)%20%7B%0A%20%20%20%20%2F%2F%20we%20don't%20know%20the%20real%20type%0A%20%20%20%20noise_maker.make_noise()%3B%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20creature%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Ferris%22)%2C%0A%20%20%20%20%20%20%20%20noise%3A%20String%3A%3Afrom(%22blub%22)%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20static_make_noise(%26creature)%3B%0A%20%20%20%20dynamic_make_noise(%26creature)%3B%0A%7D%0A
  content_markdown: >
    Методи виконуються двома способами:

    * статична диспетчеризація - коли відомий тип екземпляра, і ми знаємо
    яку функцію викликати.

    * динамічна диспетчеризація - коли тип екземпляра невідомий, і ми повинні з'ясувати
    якийсь спосіб виклику правильної функції.


    Типи трейтів `&dyn MyTrait` дають нам можливість працювати з екземплярами
    об'єктів опосередковано, використовуючи динамічну диспетчеризацію.


    Коли використовується динамічна диспетчеризація, Rust рекомендуватиме вам поставити `dyn` перед
    вашим типом ознаки, щоб інші знали про це.


    Деталі роботи за памяттю:

    * Динамічна диспетчеризація працює дещо повільніше через покажчик, котрий займається
    пошуком функції, і її виконанням.
- title: Об'єкти в Traits
  content_markdown: >
    Коли ми передаємо екземпляр об'єкту в параметр типу `&dyn MyTrait'
    ми передаємо те, що називається *об'єкт-трайтер*.


    Об'єкт-трейт - це те, що дозволяє нам опосередковано викликати коректні методи екземпляру.
    Об'єкт трейту - це структура, яка містить вказівник на на наш екземпляр зі списком вказівників
    функцій на методи нашого екземпляру.


    Деталі роботи за памяттю:

    * Цей список функцій відомий у C++ як *vtable*.
- title: Обробка нерозмірних даних
  content_markdown: >
    Трейти створюють цікавий виклик, коли ми хочемо зберігати їх у
    в іншій структурі. Трейти затушовують оригінальну структуру,

    таким чином, вони також приховують оригінальний розмір. Безрозмірні значення, що зберігаються
    у структурах, у Rust можна обробляти двома способами:


    * "узагальнення" - використання параметризованих типів для ефективного створення структур/функцій
    з відомими типами і, відповідно, відомими розмірами.

    * "непрямий" - Розміщення екземплярів на купі дає нам рівень непрямої
    непрямості, що дозволяє нам не турбуватися про розмір фактичного
    типу і просто зберігати вказівник на нього. Існують і інші способи!
- title: Узагальнені функції
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20SeaCreature%20%7B%0A%20%20%20%20pub%20name%3A%20String%2C%0A%20%20%20%20noise%3A%20String%2C%0A%7D%0A%0Aimpl%20SeaCreature%20%7B%0A%20%20%20%20pub%20fn%20get_sound(%26self)%20-%3E%20%26str%20%7B%0A%20%20%20%20%20%20%20%20%26self.noise%0A%20%20%20%20%7D%0A%7D%0A%0Atrait%20NoiseMaker%20%7B%0A%20%20%20%20fn%20make_noise(%26self)%3B%0A%7D%0A%0Aimpl%20NoiseMaker%20for%20SeaCreature%20%7B%0A%20%20%20%20fn%20make_noise(%26self)%20%7B%0A%20%20%20%20%20%20%20%20println!(%22%7B%7D%22%2C%20%26self.get_sound())%3B%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20generic_make_noise%3CT%3E(creature%3A%20%26T)%0Awhere%0A%20%20%20%20T%3A%20NoiseMaker%2C%0A%7B%0A%20%20%20%20%2F%2F%20we%20know%20the%20real%20type%20at%20compile-time%0A%20%20%20%20creature.make_noise()%3B%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20creature%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Ferris%22)%2C%0A%20%20%20%20%20%20%20%20noise%3A%20String%3A%3Afrom(%22blub%22)%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20generic_make_noise(%26creature)%3B%0A%7D%0A
  content_markdown: >
    Узагальнені типи (generics) у Rust працюють пліч-о-пліч із трейтами.
    Коли ми описуємо узагальнений тип `T`, ми можемо обмежити, які типи можна використовувати як аргумент,
    перераховуючи які обов'язкові трейти повинні реалізовувати даний узагальнений аргумент.


    У цьому прикладі тип `T` має реалізовувати трейт `Foo`:

    ```rust

    fn my_function<T>(foo: T)

    where
        T:Foo
    {
        ...
    }

    ```


    Використовуючи узагальнений тип (generics), ми створюємо статичні типізовані функції під час компіляції,
    які матимуть відомі типи та розмір, що дозволяє нам виконувати статичну диспетчеризацію виклику
    і зберігати (функцію) у вигляді значення відомого розміру.
- title: Скорочення в узагальнених функціях
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20SeaCreature%20%7B%0A%20%20%20%20pub%20name%3A%20String%2C%0A%20%20%20%20noise%3A%20String%2C%0A%7D%0A%0Aimpl%20SeaCreature%20%7B%0A%20%20%20%20pub%20fn%20get_sound(%26self)%20-%3E%20%26str%20%7B%0A%20%20%20%20%20%20%20%20%26self.noise%0A%20%20%20%20%7D%0A%7D%0A%0Atrait%20NoiseMaker%20%7B%0A%20%20%20%20fn%20make_noise(%26self)%3B%0A%7D%0A%0Aimpl%20NoiseMaker%20for%20SeaCreature%20%7B%0A%20%20%20%20fn%20make_noise(%26self)%20%7B%0A%20%20%20%20%20%20%20%20println!(%22%7B%7D%22%2C%20%26self.get_sound())%3B%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20generic_make_noise(creature%3A%20%26impl%20NoiseMaker)%0A%7B%0A%20%20%20%20%2F%2F%20we%20know%20the%20real%20type%20at%20compile-time%0A%20%20%20%20creature.make_noise()%3B%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20creature%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Ferris%22)%2C%0A%20%20%20%20%20%20%20%20noise%3A%20String%3A%3Afrom(%22blub%22)%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20generic_make_noise(%26creature)%3B%0A%7D%0A
  content_markdown: |
    У Rust є скорочення для запису факту того, що узагальнений тип обмежений якимось трейтом:

    ```rust
    fn my_function(foo: impl Foo) {
        ...
    }
    ```

    Що еквівалентно запису:

    ```rust
    fn my_function<T>(foo: T)
    where
        T:Foo
    {
        ...
    }
    ```
- title: Box
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20SeaCreature%20%7B%0A%20%20%20%20pub%20name%3A%20String%2C%0A%20%20%20%20noise%3A%20String%2C%0A%7D%0A%0Aimpl%20SeaCreature%20%7B%0A%20%20%20%20pub%20fn%20get_sound(%26self)%20-%3E%20%26str%20%7B%0A%20%20%20%20%20%20%20%20%26self.noise%0A%20%20%20%20%7D%0A%7D%0A%0Atrait%20NoiseMaker%20%7B%0A%20%20%20%20fn%20make_noise(%26self)%3B%0A%7D%0A%0Aimpl%20NoiseMaker%20for%20SeaCreature%20%7B%0A%20%20%20%20fn%20make_noise(%26self)%20%7B%0A%20%20%20%20%20%20%20%20println!(%22%7B%7D%22%2C%20%26self.get_sound())%3B%0A%20%20%20%20%7D%0A%7D%0A%0Astruct%20Ocean%20%7B%0A%20%20%20%20animals%3A%20Vec%3CBox%3Cdyn%20NoiseMaker%3E%3E%2C%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20ferris%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Ferris%22)%2C%0A%20%20%20%20%20%20%20%20noise%3A%20String%3A%3Afrom(%22blub%22)%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20let%20sarah%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Sarah%22)%2C%0A%20%20%20%20%20%20%20%20noise%3A%20String%3A%3Afrom(%22swish%22)%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20let%20ocean%20%3D%20Ocean%20%7B%0A%20%20%20%20%20%20%20%20animals%3A%20vec!%5BBox%3A%3Anew(ferris)%2C%20Box%3A%3Anew(sarah)%5D%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20for%20a%20in%20ocean.animals.iter()%20%7B%0A%20%20%20%20%20%20%20%20a.make_noise()%3B%0A%20%20%20%20%7D%0A%7D%0A
  content_markdown: >
    `Box` - це структура даних, яка дозволяє нам розміщувати, переміщати наші дані зі стека в купу.


    `Box` - це структура, відома як *smart pointer* (розумний покажчик), який містить покажчик на наші дані
    що зберігаються в купі.


    Оскільки `Box` є структурою з відомим розміром (оскільки він просто містить покажчик),
    то він часто використовується як спосіб зберігання посилання на щось у структурі, яка повинна мати
    відомі розміри її полів.


    Тип `Box` є настільки загальним, що може використовуватися майже в будь-якому місці:


    ```rust

    Box::new(Foo { ... })

    ```
- title: Узагальнені структури
  content_markdown: >
    Узагальнені структури також можуть мати свої узагальнені, параметризовані типи, обмежені трейтами.


    ```rust

    struct MyStruct<T>

    where
        T: MyTrait
    {
        foo: T
        ...
    }

    ```


    Узагальнена структура має узагальнений, параметризований тип у блоці реалізації:


    ```rust

    impl<T> MyStruct<T> {
        ...
    }

    ```
- title: Розділ 7 - Висновки
  content_markdown: >
    Тепер у нас під рукою більше мовних можливостей для чіткого представлення наших ідей!

    Абстракції Rust можуть бути простими, але вони досить потужні, щоб зробити

    роботу з кодом в радість. У цій главі ми побіжно познайомилися з розумними вказівниками

    за допомогою `Box`. У наступній главі ми дізнаємося про те, як смарт-покажчики можуть
    допомогти нам в інших

    спеціалізованих ситуаціях з пам'яттю.


    Ресурси:

    * [Відео - Об'єктно-орієнтоване програмування за 7
    хвилин] (https://www.youtube.com/watch?v=pTB0EiLXUC8)

    * [Стаття - "Чим швидше ви розучите ООП, тим краще для вас і вашого
    програмного забезпечення"] (https://dpc.pw/the-faster-you-unlearn-oop-the-better-for-you-and-your-software)
